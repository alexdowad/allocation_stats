Introduction
============

objectspace-stats is a gem that makes use of Ruby 2.1's new abilities to trace
allocations. The new `#trace_allocations` method is very raw, and does not
provide useful information for large codebases. The data must be aggregated!
objectspace-stats collects all of the allocation information generated by
`#trace_allocations`, then provides mechanisms for filtering, grouping, and
sorting allocations.

`trace_object_allocations` example
----------------------------------

Let's look at an example of how the raw `ObjectSpace.trace_object_allocations`
method works:

```
$ cat allocations.rb
require 'objspace'

ObjectSpace.trace_object_allocations do
  a = [2,3,5,7,11,13,17,19,23,29,31]
  puts ObjectSpace.allocation_sourcefile(a)
  puts ObjectSpace.allocation_sourceline(a)
end
$ ruby allocations.rb
allocations.rb
4
```

The methods that return the filename, etc, that an allocation originated from,
are not available outside `#trace_object_allocations`. By the same token, you
cannot trace any allocations that happen outside of a block passed to
`#trace_object_allocations`.

Example from the specs
----------------------

```ruby
it "should track new objects by path and class" do
  existing_array = [1,2,3,4,5]

  stats = ObjectSpace::Stats.new do
    new_string     = "stringy string"
    another_string = "another string"
    an_array       = [1,1,2,3,5,8,13,21,34,55]
    a_foreign_string = allocate_a_string_from_spec_helper
  end

  results = stats.allocations.group_by(:@sourcefile, :class).all
end
```

At this point, results is a Hash of (sourcefile, class) tuple keys and ObjectSpace::Stats::Allocation values:

```ruby
{
  [".../spec/spec_helper.rb", String]
    =>
  [#<ObjectSpace::Stats::Allocation:0x007f132ac3f160
    @object="a string from spec_helper",
    @memsize=0,
    @sourcefile=".../spec/spec_helper.rb",
    @sourceline=14,
    @class_path="Object",
    @method_id=:allocate_a_string_from_spec_helper>
  ],

  [".../spec/objectspace_stats_spec.rb", Array]
    =>
  [#<ObjectSpace::Stats::Allocation:0x007f132ac3e968
    @object=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55],
    @memsize=80,
    @sourcefile=".../spec/objectspace_stats_spec.rb",
    @sourceline=78,
    @class_path=nil,
    @method_id=nil>
  ],

  [".../spec/objectspace_stats_spec.rb", String]
    =>
  [ #<ObjectSpace::Stats::Allocation:0x007f132ac3e0d0
      @object="another string",
      @memsize=0,
      @sourcefile=".../spec/objectspace_stats_spec.rb",
      @sourceline=77,
      @class_path=nil,
      @method_id=nil>,
    #<ObjectSpace::Stats::Allocation:0x007f132ac3d838
      @object="stringy string",
      @memsize=0,
      @sourcefile=".../spec/objectspace_stats_spec.rb",
      @sourceline=76,
      @class_path=nil,
      @method_id=nil>
  ]
}
```

(I've manually inserted the ellipses.)

Here we've grouped all of the allocations that occurred while the block that was
passed into `ObjectSpace::Stats.new` by the sourcefile that the allocation
occurred in, and the class of the object that was allocated. You can see that
there are three different groups (`[spec_helper.rb, String]`,
`[objectspace_stats_spec.rb, Array]`, and `[object_space_stats.rb, String]`).
The first two groups have just one allocation observed, and the third group has
two allocations.

A little slower
---------------

Let's look at this example a little slower. Firstly, let's look at how we
collect object allocations using objectspace-stats:

```ruby
stats = ObjectSpace::Stats.new do
  new_string     = "stringy string"
  another_string = "another string"
  an_array       = [1,1,2,3,5,8,13,21,34,55]
  a_foreign_string = allocate_a_string_from_spec_helper
end
```

Stats are collected by running a block through `ObjectSpace::Stats.new`. This is
just a very very very thin wrapper around
`ObjectSpace.trace_object_allocations`. You are handed back your new
ObjectSpace::Stats, which for most purposes, is just an object that has all of
your allocation information in `#allocations`. Let's look at the next line to
see how we can pull useful information out:

```ruby
  results = stats.allocations.group_by(:@sourcefile, :class).all
```

If you are familiar with ActiveRecord, some of this might look familiar to you:
`stats.allocations` will hand you back an AllocationsProxy object, which will
collect the various transformations that you wish to run your collection of
allocations through. In this example, we only make one transformation:
`group_by(:@sourcefile, :class)`. Since more transformations might be called,
this method actually just returns the same AllocationsProxy object (but now with
your `group_by` command), so that these transformations can be chained. The
final call that will run the transformations is `#to_a` (aliased to `#all`, just
like ActiveRecord). Let's look at an example with more information to gather:

```
stats = ObjectSpace::Stats.new do
  y = YAML.dump(["one string", "two string"]) # lots of objects from Rbconfig::CONFIG["rubylibdir"]
end

stats.allocations.group_by(:@sourcefile, :class).all.keys #=>

[
  [".../spec/objectspace_stats_spec.rb", Array],
  [".../spec/objectspace_stats_spec.rb", String],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", String],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", MatchData],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Array],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Method],
  ["<RUBYLIBDIR>/psych/nodes/node.rb", Array], ["(eval)", Psych::Nodes::Sequence],
  ["<RUBYLIBDIR>/psych/tree_builder.rb", Psych::Nodes::Document],
  ["<RUBYLIBDIR>/psych.rb", Hash], ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Psych::TreeBuilder],
  ["<RUBYLIBDIR>/psych/tree_builder.rb", Psych::Nodes::Stream],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Proc],
  ["<RUBYLIBDIR>/psych/tree_builder.rb", Array],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", RubyVM::Env],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Hash],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Psych::Visitors::YAMLTree::Registrar],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Psych::Visitors::YAMLTree],
  ["<RUBYLIBDIR>/psych/scalar_scanner.rb", Hash],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Psych::ScalarScanner],
  ["<RUBYLIBDIR>/psych/class_loader.rb", Hash],
  ["<RUBYLIBDIR>/psych/visitors/yaml_tree.rb", Psych::ClassLoader],
  ["<RUBYLIBDIR>/psych/visitors/emitter.rb", Psych::Emitter],
  ["<RUBYLIBDIR>/psych/visitors/emitter.rb", Array],
  ["<RUBYLIBDIR>/psych/nodes/node.rb", Psych::Visitors::Emitter],
  ["<RUBYLIBDIR>/psych/nodes/node.rb", StringIO],
  ["<RUBYLIBDIR>/psych/nodes/node.rb", String],
  ["<RUBYLIBDIR>/psych/tree_builder.rb", Psych::Nodes::Scalar],
  ["<RUBYLIBDIR>/psych/scalar_scanner.rb", String],
  ["<RUBYLIBDIR>/psych/scalar_scanner.rb", MatchData],
  ["<RUBYLIBDIR>/psych/visitors/emitter.rb", String]
]
```


References
==========

This new feature was inspired by work that @tmm1 did at GitHub, as
described in
[this post](https://github.com/blog/1489-hey-judy-don-t-make-it-bad). It was
proposed as a feature in Ruby Core by @tmm1 in
[Ruby issue #8107](http://bugs.ruby-lang.org/issues/8107), and @ko1 wrote it
into MRI. He introduces the feature in his Ruby Kaigi 2013 presentation, on
slides 29 through 33
[[pdf](http://www.atdot.net/~ko1/activities/RubyKaigi2013-ko1.pdf)].
