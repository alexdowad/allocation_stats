Introduction
============

objectspace-stats is a gem that makes use of Ruby 2.1's new abilities to trace
allocations. The new `#trace_allocations` method is very raw, and does not
provide useful information for large codebases. The data must be aggregated!
objectspace-stats collects all of the allocation information generated by
`#trace_allocations`, then provides mechanisms for filtering, grouping, and
sorting allocations.

Let's look at an example from the specs:

```ruby
it "should track new objects by path and class" do
  existing_array = [1,2,3,4,5]

  stats = ObjectSpace::Stats.new do
    new_string     = "stringy string"
    another_string = "another string"
    an_array       = [1,1,2,3,5,8,13,21,34,55]
    a_foreign_string = allocate_a_string_from_spec_helper
  end

  results = stats.allocations.group_by(:@sourcefile, :class).all
end
```

At this point, results is a Hash of (sourcefile, class) tuple keys and ObjectSpace::Stats::Allocation values:

```ruby
{
  ["/usr/local/google/home/srawlins/code/objectspace-stats/spec/spec_helper.rb", String]
    =>
  [#<ObjectSpace::Stats::Allocation:0x007f132ac3f160
    @object="a string from spec_helper",
    @memsize=0,
    @sourcefile="/usr/local/google/home/srawlins/code/objectspace-stats/spec/spec_helper.rb",
    @sourceline=14,
    @class_path="Object",
    @method_id=:allocate_a_string_from_spec_helper>
  ],

  ["/usr/local/google/home/srawlins/code/objectspace-stats/spec/objectspace_stats_spec.rb", Array]
    =>
  [#<ObjectSpace::Stats::Allocation:0x007f132ac3e968
    @object=[1, 1, 2, 3, 5, 8, 13, 21, 34, 55],
    @memsize=80,
    @sourcefile="/usr/local/google/home/srawlins/code/objectspace-stats/spec/objectspace_stats_spec.rb",
    @sourceline=78,
    @class_path=nil,
    @method_id=nil>
  ],

  ["/usr/local/google/home/srawlins/code/objectspace-stats/spec/objectspace_stats_spec.rb", String]
    =>
  [ #<ObjectSpace::Stats::Allocation:0x007f132ac3e0d0
      @object="another string",
      @memsize=0,
      @sourcefile="/usr/local/google/home/srawlins/code/objectspace-stats/spec/objectspace_stats_spec.rb",
      @sourceline=77,
      @class_path=nil,
      @method_id=nil>,
    #<ObjectSpace::Stats::Allocation:0x007f132ac3d838
      @object="stringy string",
      @memsize=0,
      @sourcefile="/usr/local/google/home/srawlins/code/objectspace-stats/spec/objectspace_stats_spec.rb",
      @sourceline=76,
      @class_path=nil,
      @method_id=nil>
  ]
}
```

Here we've grouped all of the allocations that occurred while the block that was
passed into `ObjectSpace::Stats.new` by the sourcefile that the allocation
occurred in, and the class of the object that was allocated. You can see that
there are three different groups (`[spec_helper.rb, String]`,
`[objectspace_stats_spec.rb, Array]`, and `[object_space_stats.rb, String]`),
and the first two groups have just one allocation observed, and the third group
has two allocations.
```

References
==========

This new feature was inspired by work that @tmm1 did at GitHub, as
described in
[this post](https://github.com/blog/1489-hey-judy-don-t-make-it-bad). It was
proposed as a feature in Ruby Core by @tmm1 in
[Ruby issue #8107](http://bugs.ruby-lang.org/issues/8107), and @ko1 wrote it
into MRI. He introduces the feature in his Ruby Kaigi 2013 presentation, on
slides 29 through 33
[[pdf](http://www.atdot.net/~ko1/activities/RubyKaigi2013-ko1.pdf)].
